// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://xaibkgwkdzzipntvzldg.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhhaWJrZ3drZHp6aXBudHZ6bGRnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY3MjEzNzEsImV4cCI6MjA3MjI5NzM3MX0.dj2lWGT1IzTNhno3uEVRd2eANWw42mLJvoq6V_-FHm0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce'
  },
  global: {
    headers: {
      'apikey': SUPABASE_PUBLISHABLE_KEY
    }
  }
});

// Create a Supabase client that integrates with Clerk
// This will be configured to use Clerk's session tokens
export const supabaseWithClerk = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce'
  },
  global: {
    headers: {
      'apikey': SUPABASE_PUBLISHABLE_KEY
    }
  }
});

// Function to configure the Supabase client with Clerk token
export async function configureSupabaseWithClerk() {
  try {
    // Get the Clerk instance from the window (set by ClerkProvider)
    const clerk = (window as any).Clerk;

    if (clerk && clerk.session) {
      const token = await clerk.session.getToken();

      if (token) {
        // Set the authorization header for all requests
        supabaseWithClerk.supabaseKey = SUPABASE_PUBLISHABLE_KEY;
        supabaseWithClerk.rest.headers = {
          ...supabaseWithClerk.rest.headers,
          'Authorization': `Bearer ${token}`,
          'apikey': SUPABASE_PUBLISHABLE_KEY
        };

        console.log('Configured Supabase client with Clerk token');
        return supabaseWithClerk;
      }
    }

    console.warn('Could not configure Supabase with Clerk token');
    return supabase; // Fallback to regular client
  } catch (error) {
    console.error('Error configuring Supabase with Clerk:', error);
    return supabase; // Fallback to regular client
  }
}